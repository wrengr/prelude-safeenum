----------------------------------------------------------------
-- wren gayle romano <wren@community.haskell.org>   ~ 2021.10.16
----------------------------------------------------------------

-- Cabal >=1.10 is required by Hackage.
Cabal-Version:  >= 1.10
Build-Type:     Simple

Name:           prelude-safeenum
Version:        0.1.1.3
Stability:      provisional
Homepage:       http://wrengr.org
Author:         wren gayle romano
Maintainer:     wren@cpan.org
Copyright:      Copyright (c) 2012--2021 wren gayle romano
License:        BSD3
License-File:   LICENSE

Category:       Prelude
Synopsis:
    A redefinition of the Prelude's Enum class in order to render it safe.
Description:
    A redefinition of the Prelude's Enum class in order to render
    it safe. That is, the Haskell Language Report defines pred,
    succ, fromEnum, and toEnum to be partial functions when the
    type is Bounded, but this is unacceptable. We define a new
    type-class hierarchy for enumeration which is safe and also
    generalizes to cover types which can only be enumerated in one
    direction.

Extra-source-files:
    AUTHORS, README.md, CHANGELOG

-- This should work as far back as GHC 6.12.1, but we don't verify that by CI.
-- <https://github.com/wrengr/bytestring-trie/actions?query=workflow%3Aci>
Tested-With:
    GHC ==8.0.2,
    GHC ==8.2.2,
    GHC ==8.4.4,
    GHC ==8.6.5,
    GHC ==8.8.4,
    GHC ==8.10.3,
    GHC ==9.0.1

----------------------------------------------------------------
Source-Repository head
    Type:     git
    Location: https://github.com/wrengr/prelude-safeenum.git

----------------------------------------------------------------
Flag base4
    Default:     True
    Description: base-4.0 emits "Prelude deprecated" messages in
                 order to get people to be explicit about which
                 version of base they use.
----------------------------------------------------------------
Library
    Default-Language: Haskell2010
    Hs-Source-Dirs:    src
    Exposed-Modules:   Prelude.SafeEnum
                     , Data.Number.CalkinWilf
    
    -- I think this is all that needs doing to get rid of the warnings?
    if flag(base4)
        Build-Depends: base >= 4 && < 5
    else
        Build-Depends: base < 4

----------------------------------------------------------------
----------------------------------------------------------- fin.
